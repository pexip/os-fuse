Author: Miklos Szeredi <miklos@szeredi.hu>
Description:
 chdir to / before performing mount/umount
 http://fuse.git.sourceforge.net/git/gitweb.cgi?p=fuse/fuse;a=commit;h=1e7607ff89c65b005f69e27aeb1649d624099873

diff -Naurp fuse.orig/util/fusermount.c fuse/util/fusermount.c
--- fuse.orig/util/fusermount.c	2011-05-26 08:57:05.079757771 +0200
+++ fuse/util/fusermount.c	2011-05-26 08:57:29.727880463 +0200
@@ -1012,7 +1012,7 @@ static int check_version(const char *dev
 	return 0;
 }
 
-static int check_perm(const char **mntp, struct stat *stbuf, int *currdir_fd,
+static int check_perm(const char **mntp, struct stat *stbuf,
 		      int *mountpoint_fd, int *isdir)
 {
 	int res;
@@ -1032,13 +1032,6 @@ static int check_perm(const char **mntp,
 
 	if (S_ISDIR(stbuf->st_mode)) {
 		*isdir = 1;
-		*currdir_fd = open(".", O_RDONLY);
-		if (*currdir_fd == -1) {
-			fprintf(stderr,
-				"%s: failed to open current directory: %s\n",
-				progname, strerror(errno));
-			return -1;
-		}
 		*mountpoint_fd = open(mnt, O_RDONLY);
 		if (*mountpoint_fd == -1) {
 			fprintf(stderr, "%s: failed to open %s: %s\n",
@@ -1172,7 +1165,6 @@ static int mount_fuse(const char *mnt, c
 	char *source = NULL;
 	char *mnt_opts = NULL;
 	const char *real_mnt = mnt;
-	int currdir_fd = -1;
 	int mountpoint_fd = -1;
 	int isdir = 0;
 
@@ -1194,8 +1186,7 @@ static int mount_fuse(const char *mnt, c
 
 	res = check_version(dev);
 	if (res != -1) {
-		res = check_perm(&real_mnt, &stbuf, &currdir_fd,
-				 &mountpoint_fd, &isdir);
+		res = check_perm(&real_mnt, &stbuf, &mountpoint_fd, &isdir);
 		restore_privs();
 		if (res != -1)
 			res = do_mount(real_mnt, &type, stbuf.st_mode & S_IFMT,
@@ -1204,10 +1195,7 @@ static int mount_fuse(const char *mnt, c
 	} else
 		restore_privs();
 
-	if (currdir_fd != -1) {
-		fchdir(currdir_fd);
-		close(currdir_fd);
-	}
+	chdir("/");
 	if (mountpoint_fd != -1)
 		fcntl(mountpoint_fd, F_SETFD, FD_CLOEXEC);
 
@@ -1383,6 +1371,13 @@ int main(int argc, char *argv[])
 
 	drop_privs();
 	mnt = fuse_mnt_resolve_path(progname, origmnt);
+	if (mnt != NULL) {
+		res = chdir("/");
+		if (res == -1) {
+			fprintf(stderr, "%s: failed to chdir to '/'\n", progname);
+			exit(1);
+		}
+	}
 	restore_privs();
 	if (mnt == NULL)
 		exit(1);
